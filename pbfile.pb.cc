// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pbfile.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pbfile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace nsofdir {

namespace {

const ::google::protobuf::Descriptor* Filep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Filep_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArrFilep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArrFilep_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pbfile_2eproto() {
  protobuf_AddDesc_pbfile_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pbfile.proto");
  GOOGLE_CHECK(file != NULL);
  Filep_descriptor_ = file->message_type(0);
  static const int Filep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filep, filepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filep, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filep, mdsixhash_),
  };
  Filep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Filep_descriptor_,
      Filep::default_instance_,
      Filep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Filep));
  ArrFilep_descriptor_ = file->message_type(1);
  static const int ArrFilep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrFilep, filep_),
  };
  ArrFilep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArrFilep_descriptor_,
      ArrFilep::default_instance_,
      ArrFilep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrFilep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrFilep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArrFilep));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pbfile_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Filep_descriptor_, &Filep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArrFilep_descriptor_, &ArrFilep::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pbfile_2eproto() {
  delete Filep::default_instance_;
  delete Filep_reflection_;
  delete ArrFilep::default_instance_;
  delete ArrFilep_reflection_;
}

void protobuf_AddDesc_pbfile_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014pbfile.proto\022\007nsofdir\":\n\005Filep\022\020\n\010file"
    "path\030\001 \002(\t\022\014\n\004size\030\002 \002(\005\022\021\n\tmdsixhash\030\003 "
    "\002(\t\")\n\010ArrFilep\022\035\n\005filep\030\001 \003(\0132\016.nsofdir"
    ".Filep", 126);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pbfile.proto", &protobuf_RegisterTypes);
  Filep::default_instance_ = new Filep();
  ArrFilep::default_instance_ = new ArrFilep();
  Filep::default_instance_->InitAsDefaultInstance();
  ArrFilep::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pbfile_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pbfile_2eproto {
  StaticDescriptorInitializer_pbfile_2eproto() {
    protobuf_AddDesc_pbfile_2eproto();
  }
} static_descriptor_initializer_pbfile_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Filep::kFilepathFieldNumber;
const int Filep::kSizeFieldNumber;
const int Filep::kMdsixhashFieldNumber;
#endif  // !_MSC_VER

Filep::Filep()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nsofdir.Filep)
}

void Filep::InitAsDefaultInstance() {
}

Filep::Filep(const Filep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nsofdir.Filep)
}

void Filep::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = 0;
  mdsixhash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Filep::~Filep() {
  // @@protoc_insertion_point(destructor:nsofdir.Filep)
  SharedDtor();
}

void Filep::SharedDtor() {
  if (filepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filepath_;
  }
  if (mdsixhash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mdsixhash_;
  }
  if (this != default_instance_) {
  }
}

void Filep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Filep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Filep_descriptor_;
}

const Filep& Filep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbfile_2eproto();
  return *default_instance_;
}

Filep* Filep::default_instance_ = NULL;

Filep* Filep::New() const {
  return new Filep;
}

void Filep::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_filepath()) {
      if (filepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filepath_->clear();
      }
    }
    size_ = 0;
    if (has_mdsixhash()) {
      if (mdsixhash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mdsixhash_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Filep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nsofdir.Filep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string filepath = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filepath().data(), this->filepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required int32 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mdsixhash;
        break;
      }

      // required string mdsixhash = 3;
      case 3: {
        if (tag == 26) {
         parse_mdsixhash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mdsixhash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mdsixhash().data(), this->mdsixhash().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mdsixhash");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nsofdir.Filep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nsofdir.Filep)
  return false;
#undef DO_
}

void Filep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nsofdir.Filep)
  // required string filepath = 1;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filepath(), output);
  }

  // required int32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  // required string mdsixhash = 3;
  if (has_mdsixhash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mdsixhash().data(), this->mdsixhash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mdsixhash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mdsixhash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nsofdir.Filep)
}

::google::protobuf::uint8* Filep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nsofdir.Filep)
  // required string filepath = 1;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filepath(), target);
  }

  // required int32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->size(), target);
  }

  // required string mdsixhash = 3;
  if (has_mdsixhash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mdsixhash().data(), this->mdsixhash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mdsixhash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mdsixhash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nsofdir.Filep)
  return target;
}

int Filep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string filepath = 1;
    if (has_filepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filepath());
    }

    // required int32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // required string mdsixhash = 3;
    if (has_mdsixhash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mdsixhash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Filep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Filep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Filep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Filep::MergeFrom(const Filep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filepath()) {
      set_filepath(from.filepath());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_mdsixhash()) {
      set_mdsixhash(from.mdsixhash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Filep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Filep::CopyFrom(const Filep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filep::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Filep::Swap(Filep* other) {
  if (other != this) {
    std::swap(filepath_, other->filepath_);
    std::swap(size_, other->size_);
    std::swap(mdsixhash_, other->mdsixhash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Filep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Filep_descriptor_;
  metadata.reflection = Filep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArrFilep::kFilepFieldNumber;
#endif  // !_MSC_VER

ArrFilep::ArrFilep()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nsofdir.ArrFilep)
}

void ArrFilep::InitAsDefaultInstance() {
}

ArrFilep::ArrFilep(const ArrFilep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nsofdir.ArrFilep)
}

void ArrFilep::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArrFilep::~ArrFilep() {
  // @@protoc_insertion_point(destructor:nsofdir.ArrFilep)
  SharedDtor();
}

void ArrFilep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArrFilep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArrFilep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArrFilep_descriptor_;
}

const ArrFilep& ArrFilep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbfile_2eproto();
  return *default_instance_;
}

ArrFilep* ArrFilep::default_instance_ = NULL;

ArrFilep* ArrFilep::New() const {
  return new ArrFilep;
}

void ArrFilep::Clear() {
  filep_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArrFilep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nsofdir.ArrFilep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .nsofdir.Filep filep = 1;
      case 1: {
        if (tag == 10) {
         parse_filep:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_filep()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_filep;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nsofdir.ArrFilep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nsofdir.ArrFilep)
  return false;
#undef DO_
}

void ArrFilep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nsofdir.ArrFilep)
  // repeated .nsofdir.Filep filep = 1;
  for (int i = 0; i < this->filep_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->filep(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nsofdir.ArrFilep)
}

::google::protobuf::uint8* ArrFilep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nsofdir.ArrFilep)
  // repeated .nsofdir.Filep filep = 1;
  for (int i = 0; i < this->filep_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->filep(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nsofdir.ArrFilep)
  return target;
}

int ArrFilep::ByteSize() const {
  int total_size = 0;

  // repeated .nsofdir.Filep filep = 1;
  total_size += 1 * this->filep_size();
  for (int i = 0; i < this->filep_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->filep(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArrFilep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArrFilep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArrFilep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArrFilep::MergeFrom(const ArrFilep& from) {
  GOOGLE_CHECK_NE(&from, this);
  filep_.MergeFrom(from.filep_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArrFilep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrFilep::CopyFrom(const ArrFilep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrFilep::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->filep())) return false;
  return true;
}

void ArrFilep::Swap(ArrFilep* other) {
  if (other != this) {
    filep_.Swap(&other->filep_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArrFilep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArrFilep_descriptor_;
  metadata.reflection = ArrFilep_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace nsofdir

// @@protoc_insertion_point(global_scope)
